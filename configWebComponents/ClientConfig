An approach to configuring custom web-components.


The problem:
Web front end software is complex and nowadays written using web-components, an object oriented programming paradigm for User interface objects. Very very briefly each component is a web-page(html) or part of a web-page, along with a class (javascript) that handles all call backs from the html. Often the component has to configured or initialized in order for it render properly on the Screen. Such configuration information my be Titles, data for dropdowns, urls for API calls to servers etc.  This config data is only needed when the component is initialized, and can vary. An example would be component in a test environment, where the urls used for API calls by the component point  to the test server. The same component in the production environment would point to the production server. Using diagrams this is shown below.

The configuration information can be obtained in a number of ways: hard-coded, from a javascript file which is part of the deployment package, storing and accessing the config information from browser's local storage, from an API call to an end-point that returns the config information. Of these the API call is quite elegant and versatile, since it allows all config information to be kept in one place and accessible to applications via the  ubiquitous http/s calls.

When the web application is first invoked, the browser starts loading all components declared in the dom concurrently. The class behind each component, handles the callback events from the browser. Each component needs the configuration information, and the code to obtain the configuration can be placed in the handler that handles the event indicating that the component is available in the dom.'An alternative to having each component fetching the configuration, is to have one component fetching the configuration, and calling a method on the other components passing the configuration via parameters.

We now follow the usual practice in showing that this method works, which is by showing code that works!

When creating web-component applications, the easier way is to use a web-component library, which make available a variety of pre-built components, and contain base classes that contain boiler-plate code, and provide life-cycle events making the process of creating applications much easier.  In this solution, we use one such library .. the popular LitElement library (open-sourced by Google).
The application is to show information on 4 different Electric cars in four different tabs on a single web page. The components are designed as follows:
1. A 'main' component that consists of 4 tabs.
2. A component for each tab - i.e. a specific Electric car model. These load the information for that car model into the tab,

The configuratio information for each of the tab component is the Url from which to fetch the information for that car model

The process of distributing the config information is coded in the callback for the loading of the main  component:
a. The main component gets the config information.
b. The main component then waits until the child components(the tab components) are ready.
c. The main component then calls the method 'doConfig' on each child component, with the config information as the parameter.
d. The 'doConfig' method on the child component, updates config information and performs its initialization.

The callback and convenience methods from LitElement used are:
firstupdated => this callback indicates that the component is ready. This is used in the 'main'component to fetch the config information, and distributes it to the other components
.updatecomplete => This is an event that is set when the compnent is ready. By awaiting this event for each child component, 'main' ensures that child components are ready to accept the configuration information.

Drawbacks of this approach:
1. The child components that receive the config information have to be 'hard-coded' in the main 'firstupdated' callback. For many applications, this drawback is not serious, as they do not create new children dynamically.  This drawback can be addressed, by searching for 'main' component by traversing back to the parent. A parent method  can then be called to obtan the configuration.



.  This component initializes the tab with 


A lot of things have changed since the term client-server came into parlance. In this article, the client refers to a javascript application that runs on the browser, and the server to an application that runs on a backend server. The client calls the server using an API (or url) interface and accomplishes its front-end functions.  The client needs to know various information about the server: example: The Api endpoints, static information such as lists for drop-downs etc. If you pose this  question as a search on Google, you will get a load of information on 'Discovery' documents etc., and that is the way to go if your server will have a variety of clients and client-developers who have no clue as to how the server operates.

In the more frequent case where you are developing both the server and the client, the complexity is much reduced. You can easily configure the client with your knowledge of the server. What you really need is a 'client-information' data to configure the client. If this information is generated by the server via an Api call, then the client, when it starts calls this Api and configures itself based on the response. So far so good.
The complexity arises in the Javascript client because of how the web-technology on the browser operates. The client application are often complex consisting of numerous html and javascript files and these are loaded and initialized in parallel or in an asynchronous fashion.  In this scenario, a normal solution is to have the configuration information accessed via api by a single client component (or script) and then shared with the other components. Herein lies the challenge. The browser loads each part of the client application concurrently (making it very fast loading!) however resulting in a lack of order in component loading. To impose the requirement that the configuration should be available to the component,  requires using of callback events to confirm components have been loaded, and hence available for configuration.

Configuration is a special case of passing information between components. Configuration is one of the first actions to be taken and some components requiring configuration may not be created yet. Therefore configuration process needs to wait until all components are created.
in the beginning, 


